name: CI
permissions: read-all

# trigger build on every pull request activity against master branch
on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
    paths-ignore:
      - '**/README.md'
  pull_request:
    paths-ignore:
      - '**/README.md'

jobs:
  ansible-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup ansible venv
        working-directory: deploy
        run: |
          make venv

      - name: Install ansible-lint
        working-directory: deploy
        run: |
          ./venv/bin/pip install wheel
          ./venv/bin/pip install ansible-lint==6.16.0

      - name: add deploy/venv/bin to PATH
        run: echo $(realpath deploy/venv/bin) >> $GITHUB_PATH

      - name: Display Ansible env
        run: ansible --version

      # ignore 'meta-no-info', since we don't need to publish our roles to Ansible Galaxy
      - name: Run ansible-lint
        working-directory: deploy
        run: ansible-lint --exclude venv -x 'meta-no-info' -x 'risky-file-permissions' -vvvv
      
  local:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Setup ansible
        run: |
          make venv
        working-directory: deploy

      # shallow clone for CI speed
      - name: Setup ansible extra vars in JSON file
        run: |
          echo '{"git_clone_depth": 1}' >> parameters.json
        working-directory: deploy
        

      # skip tags related to non-existent hardware/configuration in the CI runner environment
      # shallow clone for CI
      - name: Test deployment
        run: >
          make deploy --
          --skip-tags "hardware_check,kvm_device"
          --extra-vars "@parameters.json"

  remote:
    runs-on: ubuntu-20.04

    services:
      ssh:
        image: wenzel/sshd:ubuntu22.04
        ports:
          # open SSH
          - 5000:22
        env:
          ROOT_PASSWORD: toor

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Setup ansible
        run: |
          make venv
        working-directory: deploy

      # shallow clone for CI speed
      - name: Setup ansible extra vars in JSON file
        run: |
          echo '{"git_clone_depth": 1}' >> parameters.json
        working-directory: deploy

      # the service container runs is accessible on 127.0.0.1:5000
      - name: Setup inventory
        run: |
          venv/bin/python - << '__HERE__'
          import yaml

          with open("host_vars/localhost.yml", "w") as f:
            data = {
              "ansible_port": 5000,
              "ansible_user": "root",
              "ansible_ssh_pass": "toor",
              "ansible_ssh_common_args": "-o StrictHostKeyChecking=no"
            }
            yaml.dump(data, f)
          __HERE__
        working-directory: deploy

      - name: Install Python3 on service container
        run: |
          venv/bin/ansible all -i inventory -m raw -a "apt update"
          venv/bin/ansible all -i inventory -m raw -a "apt install -y python3"
        working-directory: deploy

      # skip tags related to non-existent hardware/configuration in the CI runner environment
      - name: Test userspace deployment
        run: >
          make deploy --
          --skip-tags "hardware_check,kvm_device,update_grub,reboot_kernel"
          --extra-vars "@parameters.json"
  
  lint-python:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: install flake8
        run: |
          pip install flake8==5.0.4
          pip install flake8-bandit==4.1.1

      # select:
      #   F841 local variable 'xxx' is assigned to but never used
      #   F541 f-string is missing placeholders
      #   F401 'xxx' imported but unused
      - name: Lint python code
        run: find bkc -name '*.py' -not -path '*venv*' -not -path '*qemu-4.2.0/*' -exec flake8 --statistics --select=B,F541,F401,F841 {} \;
